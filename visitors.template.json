{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Automating the Visitor greeting application by checking if visitor is new or old",

  "Metadata" : {
    "Lambda" : {"Description" : "Lambda function is to greet visitor"},
    "API" : {"Description" : "API Gateway processes the request utilizing the Lambda function"},
    "Database" : {"Description" : "DynamoDB stores the visitor name"}
  },

  "Parameters" : {
    "apiKeyName": {
      "Description" : "API Key is used in calling api",
      "Type": "String",
      "Default" : "MyApiKeyThatIsAtLeast20Characters",
      "NoEcho": "true",
      "MinLength": "20",
      "MaxLength": "50",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*"
    }
  },

  "Resources" : {

    "LambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Action": "sts:AssumeRole",
            "Effect": "Allow",
            "Principal": { "Service": "lambda.amazonaws.com" }
          }]
        },
        "ManagedPolicyArns": ["arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"]
      }
    },

    "LambdaRolePolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Action": [
              "dynamodb:BatchWriteItem",
              "dynamodb:PutItem",
              "dynamodb:UpdateItem"
            ],
            "Effect": "Allow",
            "Resource": [{"Fn::GetAtt": ["DynamoVisitor","Arn"]}]
          },{
            "Action": [
              "dynamodb:BatchGetItem",
              "dynamodb:GetRecords",
              "dynamodb:GetShardIterator",
              "dynamodb:Query",
              "dynamodb:GetItem",
              "dynamodb:Scan"
            ],
            "Effect": "Allow",
            "Resource": [{"Fn::GetAtt": ["DynamoVisitor","Arn"]}]
          }]
        },
        "PolicyName": "LambdaRolePolicy",
        "Roles": [{"Ref": "LambdaRole"}]
      }
    },

    "VisitorLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile" : {"Fn::Join" : ["\n", [
            "import json",
            "import os",
            "import boto3",
            "ddb = boto3.resource('dynamodb')",
            "from boto3.dynamodb.conditions import Key",
            "_lambda = boto3.client('lambda')",
            "table = ddb.Table(os.environ['TABLE_NAME'])",
            "def handler(event, context):",
            "   print('Request event: {}'.format(json.dumps(event)))",
            "   actions = {",
            "     'POST': lambda dynamo, x: dynamo.put_item(**x),",
            "     'GET': lambda dynamo, x: dynamo.scan(),",
            "     'FIND': lambda dynamo, k, v: dynamo.query(KeyConditionExpression=Key(k).eq(v))",
            "   }",
            "   respData = {",
            "     'isBase64Encoded': 'true',",
            "     'statusCode': 200,",
            "     'headers': { 'Content-Type': 'application/json' }",
            "   }",
            "   try:",
            "     visitorname = event['name']",
            "     print('req-name {}'.format(visitorname))",
            "     existing = actions['FIND'](table, 'visitorname', visitorname)",
            "     if len(existing['Items']) > 0 :",
            "       respData['body'] = 'Welcome back {}'.format(visitorname)",
            "     else:",
            "       created = actions['POST'](table, {'Item': {'visitorname':visitorname}})",
            "       respData['body'] = 'Welcome {}'.format(visitorname)",
            "     return respData",
            "   except Exception as e:",
            "     respData['body'] = \"{c}: {m}\".format(c = type(e).__name__, m = str(e))",
            "     return respData",
          ]]}
        },

        "Handler": "index.handler",
        "Description": "Lambda function for Visitor greeting",
        "FunctionName": "VisitorLambda",
        "Role": {"Fn::GetAtt": ["LambdaRole","Arn"]},
        "Runtime": "python3.8",
        "Environment": {
          "Variables": {
            "TABLE_NAME": {"Ref": "DynamoVisitor"}
          }
        }
      },
      "DependsOn": ["LambdaRolePolicy","LambdaRole"]
    },

    "DynamoVisitor": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "KeySchema": [{
          "AttributeName": "visitorname",
          "KeyType": "HASH"
        }],
        "AttributeDefinitions": [{
          "AttributeName": "visitorname",
          "AttributeType": "S"
        }],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        }
      }
    },

    "VisitorApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "Visitor API",
        "Description": "API for Visitor management."
      }
    },

    "APILambdaPerms": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Fn::GetAtt": ["VisitorLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {"Fn::Join": ["", ["arn:", {"Ref": "AWS::Partition"}, ":execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "VisitorApi"}, "/*"]]}
      }
    },

    "ApiGwCWRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": ["apigateway.amazonaws.com"] },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "ManagedPolicyArns": ["arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"]
      }
    },

    "ApiGwAccount": {
      "Type": "AWS::ApiGateway::Account",
      "Properties": {
        "CloudWatchRoleArn": {"Fn::GetAtt": ["ApiGwCWRole", "Arn"] }
      },
      "DependsOn": ["VisitorApi"]
    },

    "VisitorApiStage": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {"Ref": "ApiGwDeployment"},
        "MethodSettings": [{
          "DataTraceEnabled": true,
          "HttpMethod": "*",
          "LoggingLevel": "INFO",
          "ResourcePath": "/*"
        }],
        "RestApiId": {"Ref": "VisitorApi"},
        "StageName": "PROD"
      },
      "DependsOn": ["ApiGwAccount"]
    },

    "ApiGwDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {"Ref": "VisitorApi"}
      },
      "DependsOn": ["VisitorRequest"]
    },

    "VisitorResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {"Ref": "VisitorApi"},
        "ParentId": {"Fn::GetAtt": ["VisitorApi", "RootResourceId"]},
        "PathPart": "visitor"
      }
    },

    "VisitorRequest": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "ContentHandling": "CONVERT_TO_TEXT",
          "Uri": {"Fn::Join": ["",
            ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["VisitorLambda", "Arn"]}, "/invocations"]
          ]},
          "IntegrationResponses": [{
            "StatusCode": 200
          }],
          "RequestTemplates": {
            "application/json": {"Fn::Join": ["", [
              "{",
              "  \"name\": \"$input.params('name')\"",
              "}"
            ]]}
          }
        },
        "RequestParameters": {
          "method.request.querystring.name": false
        },
        "ResourceId": {"Ref": "VisitorResource"},
        "RestApiId": {"Ref": "VisitorApi"},
        "ApiKeyRequired": true,
        "MethodResponses": [{
          "StatusCode": 200
        }]
      },
      "DependsOn": ["APILambdaPerms"]
    },

    "VisitorApiKey": {
      "Type": "AWS::ApiGateway::ApiKey",
      "Properties": {
        "Enabled": true,
        "Name": "VisitorApiKey",
        "StageKeys": [{
          "RestApiId": {"Ref": "VisitorApi"},
          "StageName": {"Ref": "VisitorApiStage"}
        }],
        "Value": {"Ref": "apiKeyName"}
      }
    },

    "VisitorApiPlan": {
      "Type": "AWS::ApiGateway::UsagePlan",
      "Properties": {
        "ApiStages": [{
          "ApiId": {"Ref": "VisitorApi"},
          "Stage": {"Ref": "VisitorApiStage"},
          "Throttle": {
            "/visitor/GET": {
              "BurstLimit": 100,
              "RateLimit": 100
            }
          }
        }],
        "Quota": {
          "Limit": 500,
          "Period": "WEEK"
        },
        "Throttle": {
          "BurstLimit": 100,
          "RateLimit": 100
        },
        "UsagePlanName": "Basic"
      }
    },

    "VisitorApiPlanKey": {
      "Type": "AWS::ApiGateway::UsagePlanKey",
      "Properties": {
        "KeyId": {"Ref": "VisitorApiKey"},
        "KeyType": "API_KEY",
        "UsagePlanId": {"Ref": "VisitorApiPlan"}
      }
    }
  },
  
  "Outputs" : {
    "VisitorApiEndpoint": {
      "Description": "Root URL of the API gateway",
      "Value": {"Fn::Join": ["", ["https://", {"Ref": "VisitorApi"}, ".execute-api.", {"Ref": "AWS::Region"}, ".", {"Ref": "AWS::URLSuffix"}, "/", {"Ref": "VisitorApiStage"}, "/"]]}
    }
  }
}