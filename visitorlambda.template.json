{
    "AWSTemplateFormatVersion" : "2010-09-09",
  
    "Description" : "Lambda funcitons definition for Visitor assessment",

    "Parameters": {
      "PassedTableName": {
        "Description": "Name of DynamoDB table",
        "Type": "String"
      },
      "PassedLambdaRoleArn": {
        "Description": "Role for Lambda Function",
        "Type": "String"
      }
    },

    "Resources" : {
    
      "VisitorLambda": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "Code": {
            "ZipFile" : {"Fn::Join" : ["\n", [
              "import json",
              "import os",
              "import boto3",
              "ddb = boto3.resource('dynamodb')",
              "from boto3.dynamodb.conditions import Key",
              "_lambda = boto3.client('lambda')",
              "table = ddb.Table(os.environ['TABLE_NAME'])",
              "def handler(event, context):",
              "   print('Request event: {}'.format(json.dumps(event)))",
              "   actions = {",
              "     'POST': lambda dynamo, x: dynamo.put_item(**x),",
              "     'GET': lambda dynamo, x: dynamo.scan(),",
              "     'FIND': lambda dynamo, k, v: dynamo.query(KeyConditionExpression=Key(k).eq(v))",
              "   }",
              "   respData = {}",
              "   try:",
              "     data = json.loads(event.get('body'))",
              "     visitorname = data.get('name')",
              "     print('req-name {}'.format(visitorname))",
              "     existing = actions['FIND'](table, 'visitorname', visitorname)",
              "     if len(existing['Items']) > 0 :",
              "       respData['message'] = 'Welcome back {}'.format(visitorname)",
              "     else:",
              "       created = actions['POST'](table, {'Item': {'visitorname':visitorname}})",
              "       respData['message'] = 'Hello {}'.format(visitorname)",
              "     return respData",
              "   except Exception as e:",
              "     respData['message'] = \"{c}: {m}\".format(c = type(e).__name__, m = str(e))",
              "     return respData"
            ]]}
          },
  
          "Handler": "index.handler",
          "Description": "Lambda function for Visitor greeting",
          "FunctionName": "VisitorLambda",
          "Role": { "Ref": "PassedLambdaRoleArn" },
          "Runtime": "python3.8",
          "Environment": {
            "Variables": {
              "TABLE_NAME": { "Ref": "PassedTableName" }
            }
          }
        }
      }
    },
    
    "Outputs" : {
      "LambdaFunctionArn" : {
        "Description" : "Lambda function",
        "Value": { "Fn::GetAtt": ["VisitorLambda","Arn"] }
      }
    }
  }